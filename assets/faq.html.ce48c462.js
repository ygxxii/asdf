import{_ as d,r as t,o as i,c,a as o,b as e,d as n,w as h,e as r}from"./app.cdf89d63.js";const l={},_=o("h1",{id:"faq",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#faq","aria-hidden":"true"},"#"),e(" FAQ")],-1),f=o("p",null,[e("以下是 "),o("code",null,"asdf"),e(" 相关的一些常见问题。")],-1),u=o("h2",{id:"支持-wsl1-吗",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#支持-wsl1-吗","aria-hidden":"true"},"#"),e(" 支持 WSL1 吗？")],-1),p={href:"https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux#WSL_1",target:"_blank",rel:"noopener noreferrer"},m=o("code",null,"asdf",-1),b=o("h2",{id:"支持-wsl2-吗",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#支持-wsl2-吗","aria-hidden":"true"},"#"),e(" 支持 WSL2 吗？")],-1),k={href:"https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux#WSL_2",target:"_blank",rel:"noopener noreferrer"},L=r('<p>重要的是，只有当前工作目录是 Unix 驱动器而不是绑定的 Windows 驱动器时，WSL2 <em>才能</em> 正常工作。</p><p>当 Github Actions 上提供主机运行器支持时，我们打算在 WSL2 上运行测试套件。（Github Actions 目前还未提供 WSL2 支持）</p><h2 id="新安装的可执行程序无法运行" tabindex="-1"><a class="header-anchor" href="#新安装的可执行程序无法运行" aria-hidden="true">#</a> 新安装的可执行程序无法运行？</h2><blockquote><p>我执行了 <code>npm install -g yarn</code> 命令，但是之后不能运行 <code>yarn</code> 命令。这是为什么？</p></blockquote>',4),S=o("code",null,"asdf",-1),g={href:"https://zh.wikipedia.org/wiki/%E5%9E%AB%E7%89%87_(%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)",target:"_blank",rel:"noopener noreferrer"},w=o("code",null,"asdf",-1),x=o("code",null,"asdf",-1),W={href:"https://yarnpkg.com/",target:"_blank",rel:"noopener noreferrer"},E=o("code",null,"asdf reshim",-1),A=r('<h2 id="shell-没有检测到新安装的垫片" tabindex="-1"><a class="header-anchor" href="#shell-没有检测到新安装的垫片" aria-hidden="true">#</a> Shell 没有检测到新安装的垫片？</h2><p>如果 <code>asdf reshim</code> 没有解决你的问题，那么很有可能是在 <code>asdf.sh</code> 或者 <code>asdf.fish</code> 的生效不在你的 Shell 配置文件（<code>.bash_profile</code>、<code>.zshrc</code>、<code>config.fish</code> 等等）的<strong>下方</strong>。这需要你在设置你的 <code>$PATH</code> <strong>之后</strong>和生效你的框架（oh-my-zsh 等等）（如果有的话）<strong>之后</strong>再生效。</p>',2);function y(B,q){const s=t("ExternalLinkIcon"),a=t("RouterLink");return i(),c("div",null,[_,f,u,o("p",null,[e("WSL1 ("),o("a",p,[e("Windows Subsystem for Linux 1"),n(s)]),e(") 不受官方支持。"),m,e(" 的某些方面可能无法正常工作。我们不打算添加对 WSL1 的官方支持。")]),b,o("p",null,[e("WSL2 ("),o("a",k,[e("Windows Subsystem for Linux 2"),n(s)]),e(") 应该作为你选择的 WSL 发行版来使用本设置和依赖说明。")]),L,o("p",null,[S,e(" 使用 "),o("a",g,[e("垫片"),n(s)]),e(" 来管理可执行程序。插件所安装的那些命令会自动创建垫片，而通过 "),w,e(" 管理工具安装过的可执行程序则需要通知 "),x,e(" 创建垫片的需要。在这个例子中，为 "),o("a",W,[e("Yarn"),n(s)]),e(" 创建一个垫片即可。请查看 "),n(a,{to:"/zh-hans/manage/core.html#reshim"},{default:h(()=>[E,e(" 命令文档")]),_:1}),e(" 了解更多。")]),A])}const N=d(l,[["render",y],["__file","faq.html.vue"]]);export{N as default};
