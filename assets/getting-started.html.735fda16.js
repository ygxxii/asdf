import{_ as r,r as i,o as d,c as p,f as c,a as s,b as e,d as o,w as t,e as a}from"./app.cdf89d63.js";const h={},u=a('<h1 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h1><p><code>asdf</code> installation involves:</p><ol><li>Installing dependencies</li><li>Downloading <code>asdf</code> core</li><li>Installing <code>asdf</code></li><li>Installing a plugin for each tool/runtime you wish to manage</li><li>Installing a version of the tool/runtime</li><li>Setting global and project versions via <code>.tool-versions</code> config files</li></ol><h2 id="_1-install-dependencies" tabindex="-1"><a class="header-anchor" href="#_1-install-dependencies" aria-hidden="true">#</a> 1. Install Dependencies</h2><p>asdf primarily requires <code>git</code> &amp; <code>curl</code>. Here is a <em>non-exhaustive</em> list of commands to run for <em>your</em> package manager (some might automatically install these tools in later steps).</p><table><thead><tr><th>OS</th><th>Package Manager</th><th>Command</th></tr></thead><tbody><tr><td>linux</td><td>Aptitude</td><td><code>apt install curl git</code></td></tr><tr><td>linux</td><td>DNF</td><td><code>dnf install curl git</code></td></tr><tr><td>linux</td><td>Pacman</td><td><code>pacman -S curl git</code></td></tr><tr><td>linux</td><td>Zypper</td><td><code>zypper install curl git</code></td></tr><tr><td>macOS</td><td>Homebrew</td><td><code>brew install coreutils curl git</code></td></tr><tr><td>macOS</td><td>Spack</td><td><code>spack install coreutils curl git</code></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">Note</p><p><code>sudo</code> may be required depending on your system configuration.</p></div><h2 id="_2-download-asdf" tabindex="-1"><a class="header-anchor" href="#_2-download-asdf" aria-hidden="true">#</a> 2. Download asdf</h2><h3 id="official-download" tabindex="-1"><a class="header-anchor" href="#official-download" aria-hidden="true">#</a> Official Download</h3>',9),m=a(`<div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">git clone https://github.com/asdf-vm/asdf.git </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.asdf --branch v0.11.1</span></span>
<span class="line"></span></code></pre></div>`,1),F=s("h3",{id:"community-supported-download-methods",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#community-supported-download-methods","aria-hidden":"true"},"#"),e(" Community Supported Download Methods")],-1),y=s("p",null,[e("We highly recommend using the official "),s("code",null,"git"),e(" method.")],-1),f=s("thead",null,[s("tr",null,[s("th",null,"Method"),s("th",null,"Command")])],-1),g=s("tr",null,[s("td",null,"Homebrew"),s("td",null,[s("code",null,"brew install asdf")])],-1),b=s("td",null,"Pacman",-1),v=s("code",null,"git clone https://aur.archlinux.org/asdf-vm.git && cd asdf-vm && makepkg -si",-1),_={href:"https://wiki.archlinux.org/index.php/AUR_helpers",target:"_blank",rel:"noopener noreferrer"},w=a(`<h2 id="_3-install-asdf" tabindex="-1"><a class="header-anchor" href="#_3-install-asdf" aria-hidden="true">#</a> 3. Install asdf</h2><p>There are many different combinations of Shells, OSs &amp; Installation methods all of which affect the configuration here. Expand the selection below that best matches your system:</p><details class="custom-container details"><summary>Bash &amp; Git</summary><p>Add the following to <code>~/.bashrc</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">.</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$HOME</span><span style="color:#E6DB74;">/.asdf/asdf.sh&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Completions must be configured by adding the following to your <code>.bashrc</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">.</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$HOME</span><span style="color:#E6DB74;">/.asdf/completions/asdf.bash&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>Bash &amp; Git (macOS)</summary><p>If using <strong>macOS Catalina or newer</strong>, the default shell has changed to <strong>ZSH</strong>. Unless changing back to Bash, follow the ZSH instructions.</p><p>Add the following to <code>~/.bash_profile</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">.</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$HOME</span><span style="color:#E6DB74;">/.asdf/asdf.sh&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Completions must be configured manually with the following entry in your <code>.bash_profile</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">.</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$HOME</span><span style="color:#E6DB74;">/.asdf/completions/asdf.bash&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details>`,4),k={class:"custom-container details"},x=a(`<summary>Bash &amp; Homebrew</summary><p>Add <code>asdf.sh</code> to your <code>~/.bashrc</code> with:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#F8F8F2;"> -e </span><span style="color:#E6DB74;">&quot;\\n. </span><span style="color:#AE81FF;">\\&quot;</span><span style="color:#E6DB74;">$(brew --prefix asdf)/libexec/asdf.sh</span><span style="color:#AE81FF;">\\&quot;</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.bashrc</span></span>
<span class="line"></span></code></pre></div>`,3),E={href:"https://docs.brew.sh/Shell-Completion#configuring-completions-in-bash",target:"_blank",rel:"noopener noreferrer"},D=a(`<div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#F8F8F2;"> -e </span><span style="color:#E6DB74;">&quot;\\n. </span><span style="color:#AE81FF;">\\&quot;</span><span style="color:#E6DB74;">$(brew --prefix asdf)/etc/bash_completion.d/asdf.bash</span><span style="color:#AE81FF;">\\&quot;</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.bashrc</span></span>
<span class="line"></span></code></pre></div>`,1),S={class:"custom-container details"},q=a(`<summary>Bash &amp; Homebrew (macOS)</summary><p>If using <strong>macOS Catalina or newer</strong>, the default shell has changed to <strong>ZSH</strong>. Unless changing back to Bash, follow the ZSH instructions.</p><p>Add <code>asdf.sh</code> to your <code>~/.bash_profile</code> with:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#F8F8F2;"> -e </span><span style="color:#E6DB74;">&quot;\\n. </span><span style="color:#AE81FF;">\\&quot;</span><span style="color:#E6DB74;">$(brew --prefix asdf)/libexec/asdf.sh</span><span style="color:#AE81FF;">\\&quot;</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.bash_profile</span></span>
<span class="line"></span></code></pre></div>`,4),B={href:"https://docs.brew.sh/Shell-Completion#configuring-completions-in-bash",target:"_blank",rel:"noopener noreferrer"},H=a(`<div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#F8F8F2;"> -e </span><span style="color:#E6DB74;">&quot;\\n. </span><span style="color:#AE81FF;">\\&quot;</span><span style="color:#E6DB74;">$(brew --prefix asdf)/etc/bash_completion.d/asdf.bash</span><span style="color:#AE81FF;">\\&quot;</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.bash_profile</span></span>
<span class="line"></span></code></pre></div>`,1),A={class:"custom-container details"},C=a(`<summary>Bash &amp; Pacman</summary><p>Add the following to <code>~/.bashrc</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">.</span><span style="color:#F8F8F2;"> /opt/asdf-vm/asdf.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),$={href:"https://wiki.archlinux.org/title/bash#Common_programs_and_options",target:"_blank",rel:"noopener noreferrer"},O=s("code",null,"bash-completion",-1),j=a(`<details class="custom-container details"><summary>Fish &amp; Git</summary><p>Add the following to <code>~/.config/fish/config.fish</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">source</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.asdf/asdf.fish</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Completions must be configured manually with the following command:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">mkdir -p </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/fish/completions</span><span style="color:#F92672;">;</span><span style="color:#F8F8F2;"> and ln -s </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.asdf/completions/asdf.fish </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/fish/completions</span></span>
<span class="line"></span></code></pre></div></details>`,1),z={class:"custom-container details"},I=a(`<summary>Fish &amp; Homebrew</summary><p>Add <code>asdf.fish</code> to your <code>~/.config/fish/config.fish</code> with:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#F8F8F2;"> -e </span><span style="color:#E6DB74;">&quot;\\nsource &quot;</span><span style="color:#F8F8F2;">(brew --prefix asdf)</span><span style="color:#E6DB74;">&quot;/libexec/asdf.fish&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/fish/config.fish</span></span>
<span class="line"></span></code></pre></div>`,3),Z={href:"https://docs.brew.sh/Shell-Completion#configuring-completions-in-fish",target:"_blank",rel:"noopener noreferrer"},N=a(`<details class="custom-container details"><summary>Fish &amp; Pacman</summary><p>Add the following to <code>~/.config/fish/config.fish</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">source</span><span style="color:#F8F8F2;"> /opt/asdf-vm/asdf.fish</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Completions are automatically configured on installation by the AUR package.</p></details><details class="custom-container details"><summary>Elvish &amp; Git</summary><p>Add <code>asdf.elv</code> to your <code>~/.config/elvish/rc.elv</code> with:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">mkdir -p </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/elvish/lib</span><span style="color:#F92672;">;</span><span style="color:#F8F8F2;"> ln -s </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.asdf/asdf.elv </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/elvish/lib/asdf.elv</span></span>
<span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;\\n&quot;&#39;use asdf _asdf; var asdf~ = $_asdf:asdf~&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/elvish/rc.elv</span></span>
<span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;\\n&quot;&#39;set edit:completion:arg-completer[asdf] = $_asdf:arg-completer~&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/elvish/rc.elv</span></span>
<span class="line"></span></code></pre></div><p>Completions are automatically configured.</p></details><details class="custom-container details"><summary>Elvish &amp; Homebrew</summary><p>Add <code>asdf.elv</code> to your <code>~/.config/elvish/rc.elv</code> with:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">mkdir -p </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/elvish/lib</span><span style="color:#F92672;">;</span><span style="color:#F8F8F2;"> ln -s (brew --prefix asdf)/libexec/asdf.elv </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/elvish/lib/asdf.elv</span></span>
<span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;\\n&quot;&#39;use asdf _asdf; var asdf~ = $_asdf:asdf~&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/elvish/rc.elv</span></span>
<span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;\\n&quot;&#39;set edit:completion:arg-completer[asdf] = $_asdf:arg-completer~&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/elvish/rc.elv</span></span>
<span class="line"></span></code></pre></div><p>Completions are automatically configured.</p></details><details class="custom-container details"><summary>Elvish &amp; Pacman</summary><p>Add <code>asdf.elv</code> to your <code>~/.config/elvish/rc.elv</code> with:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">mkdir -p </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/elvish/lib</span><span style="color:#F92672;">;</span><span style="color:#F8F8F2;"> ln -s /opt/asdf-vm/asdf.elv </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/elvish/lib/asdf.elv</span></span>
<span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;\\n&quot;&#39;use asdf _asdf; var asdf~ = $_asdf:asdf~&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/elvish/rc.elv</span></span>
<span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;\\n&quot;&#39;set edit:completion:arg-completer[asdf] = $_asdf:arg-completer~&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;">/.config/elvish/rc.elv</span></span>
<span class="line"></span></code></pre></div><p>Completions are automatically configured.</p></details>`,4),M={class:"custom-container details"},P=a(`<summary>ZSH &amp; Git</summary><p>Add the following to <code>~/.zshrc</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">.</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">$HOME</span><span style="color:#E6DB74;">/.asdf/asdf.sh&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),T=s("strong",null,"OR",-1),R={href:"https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/asdf",target:"_blank",rel:"noopener noreferrer"},G=a(`<p>Completions are configured by either a ZSH Framework <code>asdf</code> plugin or by adding the following to your <code>.zshrc</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;"># append completions to fpath</span></span>
<span class="line"><span style="color:#F8F8F2;">fpath=(\${ASDF_DIR}/completions $fpath)</span></span>
<span class="line"><span style="color:#88846F;"># initialise completions with ZSH&#39;s compinit</span></span>
<span class="line"><span style="color:#F8F8F2;">autoload -Uz compinit </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> compinit</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>if you are using a custom <code>compinit</code> setup, ensure <code>compinit</code> is below your sourcing of <code>asdf.sh</code></li><li>if you are using a custom <code>compinit</code> setup with a ZSH Framework, ensure <code>compinit</code> is below your sourcing of the framework</li></ul><p><strong>Warning</strong></p>`,4),U=s("code",null,"asdf",-1),W=s("code",null,"fpath",-1),V={href:"https://github.com/ohmyzsh/ohmyzsh/pull/8837",target:"_blank",rel:"noopener noreferrer"},L={class:"custom-container details"},Y=a('<summary>ZSH &amp; Homebrew</summary><p>Add <code>asdf.sh</code> to your <code>~/.zshrc</code> with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">echo</span><span style="color:#F8F8F2;"> -e </span><span style="color:#E6DB74;">&quot;\\n. $(brew --prefix asdf)/libexec/asdf.sh&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#F8F8F2;"> ${ZDOTDIR</span><span style="color:#F92672;">:-</span><span style="color:#F8F8F2;">~}/.zshrc</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',3),J=s("strong",null,"OR",-1),K={href:"https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/asdf",target:"_blank",rel:"noopener noreferrer"},Q=s("code",null,"asdf",-1),X={href:"https://docs.brew.sh/Shell-Completion#configuring-completions-in-zsh",target:"_blank",rel:"noopener noreferrer"},ss=s("code",null,"fpath",-1),es={href:"https://github.com/ohmyzsh/ohmyzsh/pull/8837",target:"_blank",rel:"noopener noreferrer"},as={class:"custom-container details"},os=a(`<summary>ZSH &amp; Pacman</summary><p>Add the following to <code>~/.zshrc</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#66D9EF;">.</span><span style="color:#F8F8F2;"> /opt/asdf-vm/asdf.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),ns={href:"https://wiki.archlinux.org/index.php/zsh#Command_completion",target:"_blank",rel:"noopener noreferrer"},ls=a(`<details class="custom-container details"><summary>Nushell &amp; Git</summary><p>Add <code>asdf.nu</code> to your <code>~/.config/nushell/config.nu</code> with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;\\nlet-env ASDF_NU_DIR = (</span><span style="color:#F8F8F2;">$env</span><span style="color:#E6DB74;">.HOME | path join &#39;.asdf&#39;)\\n source &quot;</span><span style="color:#F8F8F2;"> + ($env.HOME </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> path join </span><span style="color:#E6DB74;">&#39;.asdf/asdf.nu&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> save --append $nu.config-path</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Completions are automatically configured</p></details><details class="custom-container details"><summary>Nushell &amp; Homebrew</summary><p>Add <code>asdf.nu</code> to your <code>~/.config/nushell/config.nu</code> with:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;\\nlet-env ASDF_NU_DIR = (brew --prefix asdf | into string | path join &#39;libexec&#39;)\\n source &quot;</span><span style="color:#F8F8F2;"> +  (brew --prefix asdf </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> into string </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> path join </span><span style="color:#E6DB74;">&#39;libexec/asdf.nu&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> save --append $nu.config-path</span></span>
<span class="line"></span></code></pre></div><p>Completions are automatically configured</p></details><details class="custom-container details"><summary>Nushell &amp; Pacman</summary><p>Add <code>asdf.nu</code> to your <code>~/.config/nushell/config.nu</code> with:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#E6DB74;">&quot;\\nlet-env ASDF_NU_DIR = &#39;/opt/asdf-vm/&#39;\\n source /opt/asdf-vm/asdf.nu&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> save --append $nu.config-path</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Completions are automatically configured.</p></details><p><code>asdf</code> scripts need to be sourced <strong>after</strong> you have set your <code>$PATH</code> and <strong>after</strong> you have sourced your framework (oh-my-zsh etc).</p><p>Restart your shell so that <code>PATH</code> changes take effect. Opening a new terminal tab will usually do it.</p><h2 id="core-installation-complete" tabindex="-1"><a class="header-anchor" href="#core-installation-complete" aria-hidden="true">#</a> Core Installation Complete!</h2><p>This completes the installation of the <code>asdf</code> core 🎉</p><p><code>asdf</code> is only useful once you install a <strong>plugin</strong>, install a <strong>tool</strong> and manage its <strong>versions</strong>. Continue the guide below to learn how to do this.</p><h2 id="_4-install-a-plugin" tabindex="-1"><a class="header-anchor" href="#_4-install-a-plugin" aria-hidden="true">#</a> 4. Install a Plugin</h2>`,9),ts={href:"https://nodejs.org/",target:"_blank",rel:"noopener noreferrer"},is={href:"https://github.com/asdf-vm/asdf-nodejs/",target:"_blank",rel:"noopener noreferrer"},cs=s("code",null,"asdf-nodejs",-1),rs=a(`<h3 id="plugin-dependencies" tabindex="-1"><a class="header-anchor" href="#plugin-dependencies" aria-hidden="true">#</a> Plugin Dependencies</h3><p>Each plugin has dependencies so we need to check the plugin repo where they should be listed. For <code>asdf-nodejs</code> they are:</p><table><thead><tr><th>OS</th><th>Dependency Installation</th></tr></thead><tbody><tr><td>Linux (Debian)</td><td><code>apt-get install dirmngr gpg curl gawk</code></td></tr><tr><td>macOS</td><td><code>brew install gpg gawk</code></td></tr></tbody></table><p>We should install dependencies first as some Plugins have post-install hooks.</p><h3 id="install-the-plugin" tabindex="-1"><a class="header-anchor" href="#install-the-plugin" aria-hidden="true">#</a> Install the Plugin</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git</span></span>
<span class="line"></span></code></pre></div><h2 id="_5-install-a-version" tabindex="-1"><a class="header-anchor" href="#_5-install-a-version" aria-hidden="true">#</a> 5. Install a Version</h2><p>Now we have a plugin for Node.js we can install a version of the tool.</p><p>We can see which versions are available with <code>asdf list all nodejs</code> or a subset of versions with <code>asdf list all nodejs 14</code>.</p><p>We will just install the <code>latest</code> available version:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">asdf install nodejs latest</span></span>
<span class="line"></span></code></pre></div><div class="custom-container tip"><p class="custom-container-title">Note</p><p><code>asdf</code> enforces exact versions. <code>latest</code> is a helper throughout <code>asdf</code> that will resolve to the actual version number at the time of execution.</p></div><h2 id="_6-set-a-version" tabindex="-1"><a class="header-anchor" href="#_6-set-a-version" aria-hidden="true">#</a> 6. Set a Version</h2><p><code>asdf</code> performs a version lookup of a tool in all <code>.tool-versions</code> files from the current working directory up to the <code>$HOME</code> directory. The lookup occurs just-in-time when you execute a tool that <code>asdf</code> manages.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Without a version listed for a tool execution of the tool will <strong>error</strong>. <code>asdf current</code> will show you the tool &amp; version resolution, or absence of, from your current directory so you can observe which tools will fail to execute.</p></div><h3 id="global" tabindex="-1"><a class="header-anchor" href="#global" aria-hidden="true">#</a> Global</h3><p>Global defaults are managed in <code>$HOME/.tool-versions</code>. Set a global version with:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">asdf global nodejs latest</span></span>
<span class="line"></span></code></pre></div><p><code>$HOME/.tool-versions</code> will then look like:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">nodejs 16.5.0</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20),ds=s("code",null,"asdf",-1),ps=s("code",null,"python",-1),hs=s("code",null,"asdf",-1),us=a(`<h3 id="local" tabindex="-1"><a class="header-anchor" href="#local" aria-hidden="true">#</a> Local</h3><p>Local versions are defined in the <code>$PWD/.tool-versions</code> file (your current working directory). Usually, this will be the Git repository for a project. When in your desired directory execute:</p><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">asdf </span><span style="color:#F92672;">local</span><span style="color:#F8F8F2;"> nodejs latest</span></span>
<span class="line"></span></code></pre></div><p><code>$PWD/.tool-versions</code> will then look like:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">nodejs 16.5.0</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="using-existing-tool-version-files" tabindex="-1"><a class="header-anchor" href="#using-existing-tool-version-files" aria-hidden="true">#</a> Using Existing Tool Version Files</h3><p><code>asdf</code> supports the migration from existing version files from other version managers. Eg: <code>.ruby-version</code> for the case of <code>rbenv</code>. This is supported on a per-plugin basis.</p>`,7),ms={href:"https://github.com/asdf-vm/asdf-nodejs/",target:"_blank",rel:"noopener noreferrer"},Fs=s("code",null,"asdf-nodejs",-1),ys=s("code",null,".nvmrc",-1),fs=s("code",null,".node-version",-1),gs=s("code",null,"asdf",-1),bs=s("code",null,"$HOME/.asdfrc",-1),vs=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">legacy_version_file = yes</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),_s=a('<h2 id="guide-complete" tabindex="-1"><a class="header-anchor" href="#guide-complete" aria-hidden="true">#</a> Guide Complete!</h2><p>That completes the Getting Started guide for <code>asdf</code> 🎉 You can now manage <code>nodejs</code> versions for your project. Follow similar steps for each type of tool in your project!</p><p><code>asdf</code> has many more commands to become familiar with, you can see them all by running <code>asdf --help</code> or <code>asdf</code>. The core of the commands are broken into three categories:</p>',3),ws=s("code",null,"asdf",-1);function ks(xs,Es){const n=i("ExternalLinkIcon"),l=i("RouterLink");return d(),p("div",null,[u,c(" x-release-please-start-version "),m,c(" x-release-please-end "),F,y,s("table",null,[f,s("tbody",null,[g,s("tr",null,[b,s("td",null,[v,e(" or use your preferred "),s("a",_,[e("AUR helper"),o(n)])])])])]),w,s("details",k,[x,s("p",null,[e("Completions will need to be "),s("a",E,[e("configured as per Homebrew's instructions"),o(n)]),e(" or with the following:")]),D]),s("details",S,[q,s("p",null,[e("Completions will need to be "),s("a",B,[e("configured as per Homebrew's instructions"),o(n)]),e(" or with the following:")]),H]),s("details",A,[C,s("p",null,[s("a",$,[O,o(n)]),e(" needs to be installed for the completions to work.")])]),j,s("details",z,[I,s("p",null,[e("Completions are "),s("a",Z,[e("handled by Homebrew for the Fish shell"),o(n)]),e(". Friendly!")])]),N,s("details",M,[P,s("p",null,[T,e(" use a ZSH Framework plugin like "),s("a",R,[e("asdf for oh-my-zsh"),o(n)]),e(" which will source this script and setup completions.")]),G,s("p",null,[e("If you are using a ZSH Framework the associated "),U,e(" plugin may need to be updated to use the new ZSH completions properly via "),W,e(". The Oh-My-ZSH asdf plugin is yet to be updated, see "),s("a",V,[e("ohmyzsh/ohmyzsh#8837"),o(n)]),e(".")])]),s("details",L,[Y,s("p",null,[J,e(" use a ZSH Framework plugin like "),s("a",K,[e("asdf for oh-my-zsh"),o(n)]),e(" which will source this script and setup completions.")]),s("p",null,[e("Completions are configured by either a ZSH Framework "),Q,e(" or will need to be "),s("a",X,[e("configured as per Homebrew's instructions"),o(n)]),e(". If you are using a ZSH Framework the associated plugin for asdf may need to be updated to use the new ZSH completions properly via "),ss,e(". The Oh-My-ZSH asdf plugin is yet to be updated, see "),s("a",es,[e("ohmyzsh/ohmyzsh#8837"),o(n)]),e(".")])]),s("details",as,[os,s("p",null,[e("Completions are placed in a ZSH friendly location, but "),s("a",ns,[e("ZSH must be configured to use the autocompletions"),o(n)]),e(".")])]),ls,s("p",null,[e("For demonstration purposes we will install & set "),s("a",ts,[e("Node.js"),o(n)]),e(" via the "),s("a",is,[cs,o(n)]),e(" plugin.")]),rs,s("p",null,[e("Some OSs already have tools installed that are managed by the system and not "),ds,e(", "),ps,e(" is a common example. You need to tell "),hs,e(" to pass the management back to the system. The "),o(l,{to:"/manage/versions.html"},{default:t(()=>[e("Versions reference section")]),_:1}),e(" will guide you.")]),us,s("p",null,[s("a",ms,[Fs,o(n)]),e(" supports this via both "),ys,e(" and "),fs,e(" files. To enable this, add the following to your "),gs,e(" configuration file "),bs,e(":")]),vs,s("p",null,[e("See the "),o(l,{to:"/manage/configuration.html"},{default:t(()=>[e("configuration")]),_:1}),e(" reference page for more config options.")]),_s,s("ul",null,[s("li",null,[o(l,{to:"/manage/core.html"},{default:t(()=>[e("core "),ws]),_:1})]),s("li",null,[o(l,{to:"/manage/plugins.html"},{default:t(()=>[e("plugins")]),_:1})]),s("li",null,[o(l,{to:"/manage/versions.html"},{default:t(()=>[e("versions (of tools)")]),_:1})])])])}const Ss=r(h,[["render",ks],["__file","getting-started.html.vue"]]);export{Ss as default};
